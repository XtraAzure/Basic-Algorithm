#include <iostream>


// 1에서 100 사이에서 가장 큰 소수 찾는 알고리즘
int main()
{
	// 시작 소수는 2
	int P = 2;

	// 시작 소수 이후 숫자는 3이니 3부터 시작
	int N = 3;

	// N이 100이 닿을 때까지
	while (N < 100)
	{
		// 현재 숫자 N에서 절반 크기를 구하는 숫자가 M
		int M = sqrt(N);
		
		// 나머지를 구하는 숫자를 위한 첫 숫자는 2
 		int i = 2;

		// R은 remainder로 나머지를 구합니다
		int R = N % i;

		// R인 나머지가 0이 될 때까지 찾기
		while (R != 0)
		{
			// i를 하나씩 늘려서 모든 나누기를 실행해서 나머지를 구합니다
			i++;
			R = N % i;
			
			// 만일 i가 M인 N의 절반 크기보다 크면
			if (i > M)
			{
				P = N;  // 가장 큰 소수인 P를 N으로 설정합니다
			}
			else
			{
				// 아니면 계속 이 while(R !=0)을 돌립니다
			}
		}
		// N++으로 다음 숫자로 넘어갑니다
		N++;
	}

	// 가장 큰 소수 숫자를 출력
	std::cout << P << std::endl;

	return 0;
}